package main

import (
	"fmt"

	"time"

	"../times"
)

func main() {
	t := times.New(2017, 4, 4, 12, 00, 00, "Europe/London")
	fmt.Println("ADD SIMPLE ===============================================")
	result, _ := t.AddYear()
	fmt.Println("ADD YEAR:                 ()>", result)
	result, _ = t.AddMonth()
	fmt.Println("ADD MONTH:                ()>", result)
	result, _ = t.AddWeek()
	fmt.Println("ADD WEEK:                 ()>", result)
	result, _ = t.AddDay()
	fmt.Println("ADD DAY:                  ()>", result)
	result, _ = t.AddHour()
	fmt.Println("ADD HOUR:                 ()>", result)
	result, _ = t.AddMinute()
	fmt.Println("ADD MINUTE:               ()>", result)
	result, _ = t.AddSecond()
	fmt.Println("ADD SECOND:               ()>", result)

	fmt.Println("\nADD ADVANCED =============================================")
	result, _ = t.AddYears(2)
	fmt.Println("ADD YEARS:               (2)>", result)
	result, _ = t.AddMonths(2)
	fmt.Println("ADD MONTHS:              (2)>", result)
	result, _ = t.AddWeeks(2)
	fmt.Println("ADD WEEKS:               (2)>", result)
	result, _ = t.AddDays(2)
	fmt.Println("ADD DAYS:                (2)>", result)
	result, _ = t.AddHours(2)
	fmt.Println("ADD HOURS:               (2)>", result)
	result, _ = t.AddMinutes(2)
	fmt.Println("ADD MINUTES:             (2)>", result)
	result, _ = t.AddSeconds(2)
	fmt.Println("ADD SECONDS:             (2)>", result)

	fmt.Println("\nSUB SIMPLE ===============================================")
	result, _ = t.SubYear()
	fmt.Println("SUB YEAR:                ()>", result)
	result, _ = t.SubMonth()
	fmt.Println("SUB MONTH:               ()>", result)
	result, _ = t.SubWeek()
	fmt.Println("SUB WEEK:                ()>", result)
	result, _ = t.SubDay()
	fmt.Println("SUB DAY:                 ()>", result)
	result, _ = t.SubHour()
	fmt.Println("SUB HOUR:                ()>", result)
	result, _ = t.SubMinute()
	fmt.Println("SUB MINUTE:              ()>", result)
	result, _ = t.SubSecond()
	fmt.Println("SUB SECOND:              ()>", result)

	fmt.Println("\nSUB ADVANCED =============================================")
	result, _ = t.SubYears(2)
	fmt.Println("SUB YEARS:              (2)>", result)
	result, _ = t.SubMonths(5)
	fmt.Println("SUB MONTHS:             (5)>", result)
	result, _ = t.SubWeeks(2)
	fmt.Println("SUB WEEKS:              (2)>", result)
	result, _ = t.SubDays(6)
	fmt.Println("SUB DAYS:               (6)>", result)
	result, _ = t.SubHours(2)
	fmt.Println("SUB HOURS:              (2)>", result)
	result, _ = t.SubMinutes(2)
	fmt.Println("SUB MINUTES:            (2)>", result)
	result, _ = t.SubSeconds(2)
	fmt.Println("SUB SECONDS:            (2)>", result)

	fmt.Println("\nSTART ===================================================")
	result, _ = t.StartOfDay()
	fmt.Println("START OF DAY:           ()>", result)
	result, _ = t.StartOfWeek()
	fmt.Println("START OF WEEK:          ()>", result)
	result, _ = t.StartOfMonth()
	fmt.Println("START OF MONTH:         ()>", result)
	result, _ = t.StartOfYear()
	fmt.Println("START OF YEAR:          ()>", result)
	result, _ = t.StartOfDecade()
	fmt.Println("START OF DECADE:        ()>", result)
	result, _ = t.StartOfCentury()
	fmt.Println("START OF CENTURY:       ()>", result)

	fmt.Println("\nEND =====================================================")
	result, _ = t.EndOfDay()
	fmt.Println("END OF DAY:             ()>", result)
	result, _ = t.EndOfWeek()
	fmt.Println("END OF WEEK:            ()>", result)
	result, _ = t.EndOfMonth()
	fmt.Println("END OF MONTH:           ()>", result)
	result, _ = t.EndOfYear()
	fmt.Println("END OF YEAR:            ()>", result)
	result, _ = t.EndOfDecade()
	fmt.Println("END OF DECADE:          ()>", result)
	result, _ = t.EndOfCentury()
	fmt.Println("END OF CENTURY:         ()>", result)

	fmt.Println("\nIS ======================================================")
	fmt.Println("IS WEEKEND:             ()>", t.IsWeekend())
	fmt.Println("IS WORKDAY:             ()>", t.IsWorkday())
	fmt.Println("IS MONDAY:              ()>", t.IsMonday())
	fmt.Println("IS TUESDAY:             ()>", t.IsTuesday())
	fmt.Println("IS WEDNESDAY:           ()>", t.IsWednesday())
	fmt.Println("IS THURSDAY:            ()>", t.IsThursday())
	fmt.Println("IS FRIDAY:              ()>", t.IsFriday())
	fmt.Println("IS SATURDAY:            ()>", t.IsSaturday())
	fmt.Println("IS SUNDAY:              ()>", t.IsSunday())

	fmt.Println("\nDIFFERENCE ==============================================")
	fmt.Println("DIFFERENCE:             ()>", t.Difference())
	fmt.Println("DIFFINSECONDS:          ()>", t.DiffInSeconds())
	fmt.Println("DIFFINMINUTES:          ()>", t.DiffInMinutes())
	fmt.Println("DIFFINHOURS:            ()>", t.DiffInHours())
	fmt.Println("DIFFINDAYS:             ()>", t.DiffInDays())
	fmt.Println("DIFFINWEEKS:            ()>", t.DiffInWeeks())
	fmt.Println("DIFFINMONTHS:           ()>", t.DiffInMonths())
	fmt.Println("DIFFINYEARS:            ()>", t.DiffInYears())

	fmt.Println("\nFORMATS =================================================")
	result, _ = t.InRFC1889()
	fmt.Println("IN RFC 1889:            ()>", result)

	fmt.Println("\nFUNCTIONS ===============================================")

	t = times.New(2017, 4, 4, 12, 00, 00, "Europe/London")
	fmt.Println("IS LEAP YEAR:           ()>", t.IsLeapYear())
	result, _ = t.TimeNext(time.Wednesday)
	fmt.Println("TIME NEXT:     (Wednesday)>", result)
	result, _ = t.TimePrevious(time.Wednesday)
	fmt.Println("TIME LAST:     (Wednesday)>", result)
	fmt.Println("IS FUTURE:              ()>", t.IsFuture())
	fmt.Println("IS PAST:                ()>", t.IsPast())

}
